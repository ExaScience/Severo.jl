import Random: randn
import LinearAlgebra: mul!, diagm
import CSV

A = [-0.2647377  -0.3628384  -0.8008401   2.6367581  -0.3066047
-1.0108550   0.4415849   0.4971994   0.7130917  -1.6901356
 0.1299009  -1.9670420   0.3396633   0.0450703   0.2689103
-0.4327655   0.8945614   0.3354950   0.0236761   1.0010736
 1.1531236  -0.4870375   0.5538314   0.7301607  -0.2790501
-0.5516106   0.9295754  -0.9023805  -0.8772718   0.4859813
-0.7435162  -0.4139140  -0.8686545  -0.1817311  -0.4896339
-0.1260464  -0.0606175  -0.0056998  -0.1161688  -0.3633300
-1.0073214  -1.0435932  -0.2712927   0.1596190  -2.1187607
 0.3649975   0.1077434   0.4546468  -0.2894472   0.8609560
]

m,n = size(A)
m_b = 4

V = [
	-0.70265   0.00000   0.00000   0.00000
	-0.61396   0.00000   0.00000   0.00000
	-0.13002   0.00000   0.00000   0.00000
	-0.22419   0.00000   0.00000   0.00000
	 0.24933   0.00000   0.00000   0.00000
]
W = zeros(m, m_b)
F = zeros(n)
T = zeros(n)

B = zeros(m_b, m_b)

SVtol = min(sqrt(eps()), 1e-6)

function matmul(yptr::Ptr{Float64}, trans::Cchar, xptr::Ptr{Float64}, data::Ptr{Cvoid})
	if trans == 84
		x = unsafe_wrap(Array, xptr, m)
		y = unsafe_wrap(Array, yptr, n)
		mul!(y, A', x)
	else
		x = unsafe_wrap(Array, xptr, n)
		y = unsafe_wrap(Array, yptr, m)
		mul!(y, A, x)
	end
	nothing
end

function randv(yptr::Ptr{Float64}, n::Cint)
	y = unsafe_wrap(Array, yptr, n)
	y[:] = randn(n)
	nothing
end

j = 0

ccall(("ablanzbd", "./irlba.so"), Cint,
	(Int64, Int64, Int64, Int64, Float64, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Float64}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
	j, m, n, m_b, SVtol, B, V, W, F, T,
	@cfunction(randv, Cvoid, (Ptr{Float64}, Cint)),
	@cfunction(matmul, Cvoid, (Ptr{Float64}, Cchar, Ptr{Float64}, Ptr{Cvoid})),
	C_NULL)

Vout = [
	-0.70265   0.10696  -0.41588   0.23364
	-0.61396  -0.31576  -0.02635  -0.23876
	-0.13002  -0.33378   0.36526  -0.69772
	-0.22419  -0.22507   0.74020   0.58828
	 0.24933  -0.85252  -0.38084   0.23561
]

Wout = [
	-0.08372   0.05147   0.75445   0.58708
	-0.11191   0.39449   0.40767  -0.59833
	 0.61119  -0.20512   0.19593   0.05857
	-0.02407  -0.49257   0.38140  -0.39264
	-0.44195   0.29208  -0.08637   0.24070
	 0.13643  -0.17449  -0.25603   0.09733
	 0.43744   0.08534  -0.04920   0.18957
	 0.03355   0.11618  -0.05446  -0.05063
	 0.44369   0.58077   0.04388  -0.13140
	-0.05530  -0.28843   0.02081  -0.12871
]

Bout = [
	 1.84751   1.32549   0.00000   0.00000
	 0.00000   2.57344   2.01139   0.00000
	 0.00000   0.00000   2.37540   1.21943
	 0.00000   0.00000   0.00000   1.94601
]

Fout = [
	 0.346946
	-0.457926
	 0.336514
	 0.047937
	 0.068736
]
